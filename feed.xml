<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.4">Jekyll</generator><link href="https://sustcsonglin.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://sustcsonglin.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2024-12-04T10:47:59+00:00</updated><id>https://sustcsonglin.github.io/feed.xml</id><title type="html">blank</title><subtitle>A simple, whitespace theme for academics. Based on [*folio](https://github.com/bogoli/-folio) design. </subtitle><entry><title type="html">DeltaNet Explained (Part I)</title><link href="https://sustcsonglin.github.io/blog/2024/deltanet-1/" rel="alternate" type="text/html" title="DeltaNet Explained (Part I)"/><published>2024-12-03T22:25:00+00:00</published><updated>2024-12-03T22:25:00+00:00</updated><id>https://sustcsonglin.github.io/blog/2024/deltanet-1</id><content type="html" xml:base="https://sustcsonglin.github.io/blog/2024/deltanet-1/"><![CDATA[<p>This is a blogpost accompanying our recent NeurIPS ‘24 publication - <a href="https://arxiv.org/abs/2406.06484">Parallelizing Linear Transformers with the Delta Rule over Sequence Length</a>. (<a href="https://github.com/sustcsonglin/flash-linear-attention/blob/main/fla/layers/delta_net.py">code</a>, <a href="https://people.csail.mit.edu/yoonkim/data/efficient_architecture\mathbf{S}_talk.pdf">slides</a>)</p> <h2 id="linear-attention-as-rnn">Linear attention as RNN</h2> <p>Notations: we use CAPITAL BOLD letters to represent matrices, lowercase bold letters to represent vectors, and regular lowercase letters to represent scalars.</p> <h3 id="what-is-linear-attention">What is linear attention?</h3> <p>The vanilla softmax attention mechanism, though powerful, suffers from quadratic complexity in sequence length. Let’s see how linear attention addresses this issue by starting with the standard softmax attention (assuming single head):</p> \[\begin{aligned} \mathrm{Parallel\ training:} &amp;&amp;&amp; \mathbf{O} = \mathrm{softmax}(\mathbf{Q}\mathbf{K}^\top \odot \mathbf{M})\mathbf{V} &amp;&amp;\in \mathbb{R}^{L\times d} \\ \mathrm{Iterative\ inference:} &amp;&amp;&amp;\mathbf{o_t} = \sum_{j=1}^t \frac{\exp(\mathbf{q}_t^\top \mathbf{k}_j)}{\sum_{l=1}^t\exp(\mathbf{q}^\top_t \mathbf{k}_l)}\mathbf{v}_j &amp;&amp;\in \mathbb{R}^d \end{aligned}\] <p>Here,</p> <ul> <li> <p>\(L\) represents sequence length</p> </li> <li> <p>\(d\) represents head dimension</p> </li> <li> <p>\(\mathbf{Q}, \mathbf{K}, \mathbf{V}, \mathbf{O} \in \mathbb{R}^{L \times d}\) represent the query, key, value, and output matrices respectively.</p> </li> <li> <p>\(\mathbf{M} \in \mathbb{R}^{L \times L}\) is the causal mask for autoregressive modeling by ensuring each position can only attend to previous positions.</p> </li> </ul> <p>What linear attention<d-cite key="katharopoulos2020transformers"></d-cite> does is simply removing the softmax operator:</p> \[\begin{aligned} \mathrm{Parallel\ training：} &amp;&amp;&amp;\mathbf{O}= (\mathbf{Q}\mathbf{K}^\top \odot \mathbf{M})\mathbf{V} &amp;&amp;\in \mathbb{R}^{L\times d} \\ \mathrm{Iterative\ inference：}&amp;&amp;&amp;\mathbf{o_t} = \sum_{j=1}^t (\mathbf{q}_t^\top \mathbf{k}_j) \mathbf{v}_j &amp;&amp;\in \mathbb{R}^d \end{aligned}\] <p>While removing softmax alone doesn’t immediately reduce computational complexity, it enables a crucial mathematical property: linearity. This property, particularly associativity, allows us to restructure the computations in ways that significantly improve efficiency. For training, researchers have developed <strong>chunkwise parallel</strong> techniques<d-cite key="sun2023retentive"></d-cite> that leverage this linearity to achieve subquadratic complexity while maintaining hardware efficiency, which forms the foundation of our open-source <strong>flash-linear-attention</strong> library<d-cite key="yang_fla_2024"></d-cite>.</p> <p>For inference, the associative property enables an elegant restructuring of the computation:</p> \[\begin{aligned} \mathbf{o_t} &amp;= \sum_{j=1}^t \mathbf{q}_t^\top (\mathbf{k}_j\mathbf{v}_j^\top) \\ &amp;=\mathbf{q}_t^\top\sum_{j=1}^t\mathbf{k}_j\mathbf{v}_j^\top \\ &amp;= (\sum_{j=1}^t\mathbf{v}_j\mathbf{k}_j^\top)\mathbf{q}_t \end{aligned}\] <p>This restructuring reveals something interesting. Let’s define a state matrix \(\mathbf{S}_t = \sum_{j=1}^t\mathbf{v}_j\mathbf{k}_j^\top\). Then the computation can be expressed as:</p> \[\mathbf{S}_t = \mathbf{S}_{t-1} + \mathbf{v}_t\mathbf{k}_t^\top \in \mathbb{R}^{d\times d}, \quad \mathbf{o}_t = \mathbf{S}_t \mathbf{q}_t \in \mathbb{R}^{d}\] <p>where \(d\) represents the head dimension. This formulation reveals that linear attention is essentially a linear RNN with a matrix-valued state \(\mathbf{S}\) that accumulates key-value outer products, enabling efficient state expansion from \(\mathcal{O}(d)\) to \(\mathcal{O}(d^2)\).</p> <details> <summary> Why do we want state expansion?</summary> Traditionally, RNN's hidden dimension is often the same (or of the same magnitude) as the input dimension, due to the expensive matrix-multiply-based state update. However, RNN solely relies on the recurrent state to remember the entire history and state size tends to be the bottleneck to remember sufficient amount of information, especially in retrieval tasks. We've been observing a substantial amount of research investigating hardware-efficient state expansion since Mamba1<d-cite key="Gu2023MambaLS"></d-cite> explicitly pointed it out, and linear attention styled outer-product-based update has proven to be optimal in terms of efficiently scaling state up (Mamba2<d-cite key="mamba2"></d-cite> also adopts this strategy!). In our previous HGRN2 work<d-cite key="qin_hgrn2_2024"></d-cite>, we investigated different approaches for state expansion, and the outer product based mechanism has proven to be both performant and scalable. </details> <p>This state-space view not only provides theoretical insights but also enables efficient incremental computation - we only need to store and update \(\mathbf{S}_t\) instead of all previous key-value pairs. This formulation reduces the time complexity from \(\mathcal{O}(L^2)\) to \(\mathcal{O}(L)\) for autoregressive inference, and the space complexity from \(\mathcal{O}(L)\) to \(\mathcal{O}(1)\), making it particularly attractive in two scenarios:</p> <ul> <li> <p><strong>Long sequence modeling</strong> where quadratic complexity could be a bottleneck.</p> </li> <li> <p>Generation where computation is <strong>memory-bound</strong> and the removal of KV cache significantly improves <strong>inference latency</strong>.</p> </li> </ul> <h3 id="no-free-lunch-key-limitations-of-linear-attention">No Free Lunch: Key Limitations of Linear Attention</h3> <p>Unfortunately, there is no free lunch. The fixed-size state matrix in linear attention means it cannot perfectly preserve all historical information, making exact retrieval particularly challenging.</p> <p>More formally, linear attention implements a key-value associative memory, which is the sum of outer products between keys and values \(\mathbf{S} = \sum \mathbf{v}_i\mathbf{k}_i^\top\). Assuming all keys are normalized to unit length, when we try to retrieve a value associated with a specific key \(k_j\), we get:</p> \[\begin{aligned} \mathbf{S}\mathbf{k}_j &amp;= \sum \mathbf{v}_i (\mathbf{k}_i^\top \mathbf{k}_j) \\ &amp;= \mathbf{v}_j + \underbrace{\sum_{i\neq j} (\mathbf{k}_i^\top \mathbf{k}_j)\mathbf{v}_i}_{\text{retrieval error}} \end{aligned}\] <p>To minimize the retrieval error term, we need \(\mathbf{k}_i^\top \mathbf{k}_j = 0\) for all \(i\neq j\) - in other words, all keys should be <strong>orthogonal</strong> to each other. However, this reveals a fundamental limitation: in a \(d\)-dimensional space, you can only have at most \(d\) orthogonal vectors. This explains why increasing head dimension helps (For example, Sun et al.<d-cite key="sun2023retentive"></d-cite> have demonstrated the necessity of increasing head dimensions to enhance model performance) - it provides more “room” in the vector space for storing distinct key-value pairs!</p> <p>This theoretical limitation manifests in practice. Despite recent advances in gated variants of linear attention (e.g., GLA<d-cite key="yang_gated_2023"></d-cite>, Mamba<d-cite key="Gu2023MambaLS"></d-cite>) significantly narrowing the performance gap with standard attention,</p> <details> <summary>Enhance linear attention using gating mechanism</summary> <p> Given the close relationship between linear attention and RNN, it is no wonder that researchers want to enhance linear attention with the (forgetting) gating mechanisms, which has been shown unreasonably effective in nonlinear RNN<d-cite key="unreasonable-forget-gate"></d-cite> and linear RNN<d-cite key="HGRN"></d-cite>: </p> <p> \[\mathbf{S}_t = \mathbf{G}_t \odot \mathbf{S}_{t-1} + \mathbf{v}_t\mathbf{k}_t^\top\] </p> <p> with different structured parameterization for \(\mathbf{G}_t \in \mathbb{R}^{d\times d}\) for parameter efficiency, often with outer product structure. Different models have proposed various ways to structure this gating matrix: </p> <p> For Decaying Fast weight<d-cite key="mao_fine-tuning_2022"></d-cite>: \[\mathbf{G}_t = \mathbf{\beta_t} \mathbf{\alpha_t}^\top\] </p> <p> For GLA<d-cite key="yang_gated_2023"></d-cite>: \[\mathbf{G}_t = \mathbf{1} \mathbf{\alpha_t}^\top\] </p> <p> For Mamba1<d-cite key="Gu2023MambaLS"></d-cite>: \[\mathbf{G}_t = \exp(-(\mathbf{\Delta_t} \mathbf{1}^\top) \odot \exp(A))\] </p> <p> For Mamba2<d-cite key="mamba2"></d-cite>: \[\mathbf{G}_t = \gamma_t \mathbf{1}\mathbf{1}^\top\] </p> <p> Cf. Table 1 of GLA<d-cite key="yang_gated_2023"></d-cite> for a summarization. </p> </details> <p>in-context retrieval and exact copying remain challenging. This has been both empirically observed and theoretically proven in recent works, such as <d-cite key="zoology"></d-cite><d-cite key="arora_simple_2024"></d-cite>.</p> <h2 id="deltanet-linear-attention-with-delta-rule">DeltaNet: Linear Attention with Delta Rule</h2> <h3 id="what-is-delta-rule">What is Delta Rule?</h3> <p>The Delta Rule<d-cite key="widrow_adaptive_1988"></d-cite> is a fundamental error-correction learning principle in neural networks. Its core idea is beautifully simple: adjust the model’s parameters based on the difference (delta) between what we want (target) and what we actually get (prediction).</p> <p>To understand this intuitively, imagine teaching a child to aim at a target. If they shoot too far to the left, you’d tell them to adjust right; too far right, adjust left. The size of the adjustment depends on how far they missed - a concept directly reflected in the Delta Rule.</p> <details> <summary>Click to expand Delta Rule code</summary> <figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="n">numpy</span> <span class="k">as</span> <span class="n">np</span>

<span class="k">def</span> <span class="nf">delta_rule</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">epochs</span><span class="o">=</span><span class="mi">100</span><span class="p">,</span> <span class="n">lr</span><span class="o">=</span><span class="mf">0.1</span><span class="p">):</span>
    <span class="sh">"""</span><span class="s">
    Simple delta rule implementation
    x: input features (N samples by D features)
    y: target values (N samples)
    </span><span class="sh">"""</span>
    <span class="c1"># Initialize weights
</span>    <span class="n">w</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">zeros</span><span class="p">(</span><span class="n">x</span><span class="p">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span>
    
    <span class="c1"># Train
</span>    <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">epochs</span><span class="p">):</span>
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="nf">len</span><span class="p">(</span><span class="n">x</span><span class="p">)):</span>
            <span class="c1"># Forward pass
</span>            <span class="n">pred</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">dot</span><span class="p">(</span><span class="n">x</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="n">w</span><span class="p">)</span>
            
            <span class="c1"># Compute error
</span>            <span class="n">error</span> <span class="o">=</span> <span class="n">y</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">-</span> <span class="n">pred</span>
            
            <span class="c1"># Update weights
</span>            <span class="n">w</span> <span class="o">+=</span> <span class="n">lr</span> <span class="o">*</span> <span class="n">error</span> <span class="o">*</span> <span class="n">x</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
            
    <span class="k">return</span> <span class="n">w</span>

<span class="c1"># Example usage
</span><span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="sh">"</span><span class="s">__main__</span><span class="sh">"</span><span class="p">:</span>
    <span class="c1"># Generate toy data
</span>    <span class="n">x</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">random</span><span class="p">.</span><span class="nf">randn</span><span class="p">(</span><span class="mi">100</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span>  <span class="c1"># 100 samples, 3 features
</span>    <span class="n">true_w</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">array</span><span class="p">([</span><span class="mf">0.5</span><span class="p">,</span> <span class="o">-</span><span class="mf">0.2</span><span class="p">,</span> <span class="mf">0.1</span><span class="p">])</span>
    <span class="n">y</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">dot</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">true_w</span><span class="p">)</span> <span class="o">+</span> <span class="mf">0.1</span> <span class="o">*</span> <span class="n">np</span><span class="p">.</span><span class="n">random</span><span class="p">.</span><span class="nf">randn</span><span class="p">(</span><span class="mi">100</span><span class="p">)</span>
    
    <span class="c1"># Train
</span>    <span class="n">w</span> <span class="o">=</span> <span class="nf">delta_rule</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">)</span>
    <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">True weights:</span><span class="sh">"</span><span class="p">,</span> <span class="n">true_w</span><span class="p">)</span>
    <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Learned weights:</span><span class="sh">"</span><span class="p">,</span> <span class="n">w</span><span class="p">)</span></code></pre></figure> </details> <h3 id="what-is-deltanet">What is DeltaNet?</h3> <p>DeltaNet<d-cite key="schlag_linear_2021"></d-cite> elegantly applies this error-correction principle to linear attention. Instead of simply accumulating information additively, it updates its state based on prediction errors:</p> \[\mathbf{S}_{t} = \mathbf{S}_{t-1} - \beta_t(\mathbf{S}_{t-1} \mathbf{k}_t - \mathbf{v}_t)\mathbf{k}_t^\top = \mathbf{S}_{t-1} - \beta_t \mathbf{S}_{t-1} \mathbf{k}_t \mathbf{k}_t^\top + \beta_t \mathbf{v}_t \mathbf{k}_t^\top\] <p>The parallel to the Delta Rule becomes clear when we break down the components:</p> <ul> <li>\(\beta_t \in \mathbb{R}\) acts as the learning rate</li> <li>\(\mathbf{k}_t \in \mathbb{R}^d\) is the input data</li> <li>\(\mathbf{v}_t \in \mathbb{R}^d\) is the target</li> <li>\(\mathbf{S}_{t-1} \mathbf{k}_t \in \mathbb{R}^d\) is our current prediction</li> </ul> <p>There’s another intuitive way to understand this update rule. Think of \(\mathbf{S}_{t-1}\mathbf{k}_t\) as retrieving the “old value” associated with the current key \(\mathbf{k}_t\) from memory. When we encounter a newly associated value \(\mathbf{v}_t\) for the same key, rather than blindly overwriting, we make a careful update:</p> \[\mathbf{v}_t^{\text{new}} = (1-\beta_t) \mathbf{v}_t^{\text{old}} + \beta_t \mathbf{v}_t, \qquad \mathbf{S}_t = \mathbf{S}_{t-1} - \underbrace{\mathbf{v}_t^{\text{old}} \mathbf{k}_t^\top}_{\text{erase}} + \underbrace{\mathbf{v}_t^{\text{new}} \mathbf{k}_t^\top}_{\text{write}}\] <p>where \(\mathbf{v}_t^{\text{new}}\) is a learned combination of the old and current values, controlled by a dynamic \(\beta_t \in (0,1)\): when \(\beta_t=0\), the memory content remains intact, and when \(\beta_t=1\), we completely replace the old associated value with the new one.</p> <h3 id="deltanet-as-an-strong-rnn-in-context-learner">DeltaNet as an Strong RNN In-context Learner</h3> <p>DeltaNet was originally designed to enhance associative recall performance. MQAR (Multi-Query Associative Recall)<d-cite key="zoology"></d-cite> is a recent popular synthetic benchmark aimed at measuring the in-context recall ability for subquadratic models.</p> <p>The MQAR task works as follows: Each letter is associated with a number, and the model is asked to correctly recall the number associated with each letter in a query sequence.</p> <p>For example, given the input:</p> <p><code class="language-plaintext highlighter-rouge">A 4 B 3 C 6 F 1 E 2 → A ? C ? F ? E ? B ?</code></p> <p>The format consists of:</p> <ol> <li>Key-Value pairs (before the arrow): Letters paired with their corresponding numbers</li> <li>Query sequence (after the arrow): Letters whose associated numbers need to be recalled</li> </ol> <p>The correct output for this example would be: 4, 6, 1, 2, 3</p> <p>This benchmark effectively tests a model’s ability to store and retrieve multiple associations accurately within its context window, making it particularly valuable for evaluating the recall capabilities of subquadratic models. While conventional gated convolution and recurrent models generally underperform in this domain, in our experiments, DeltaNet demonstrates notably strong performance in such synthetic retrieval tasks.</p> <div class="row justify-content-center"> <div class="col-6"> <img class="img-fluid" style="background-color: white; padding: 20px; border-radius: 5px; box-shadow: 0 2px 4px rgba(0,0,0,0.1);" src="/assets/img/blog/deltanet/mqar-1.png"/> </div> </div> <div class="caption"> The hardest setting from the original Zoology paper </div> <p>This initial success was particularly exciting - the perfect performance on MQAR caught us by surprise. What makes this result especially promising is that MQAR performance is closely correlated with “Associative-Recall-Hit” in real-world language modeling tasks. This connection provided us with strong motivation to explore scaling up DeltaNet.</p> <p>After all, we wouldn’t want to invest in scaling up an arbitrary model without compelling evidence of its potential. MQAR serves as an excellent proxy metric, giving us confidence that a model’s performance will translate well to real-world language modeling tasks.</p> <p>We’ve also conducted experiments on MAD<d-cite key="poli_mechanistic_2024"></d-cite>, another more comprehensive benchmark than MQAR that is also motivated to test new architecture’s capacities, and the results are summarized below:</p> <table> <thead> <tr> <th>Model</th> <th>Compress</th> <th>Fuzzy Recall</th> <th>In-Context Recall</th> <th>Memorize</th> <th>Noisy Recall</th> <th>Selective Copy</th> <th>Average</th> </tr> </thead> <tbody> <tr> <td>Transformer</td> <td>51.6</td> <td>29.8</td> <td>94.1</td> <td>85.2</td> <td>86.8</td> <td>99.6</td> <td>74.5</td> </tr> <tr> <td>Hyena</td> <td>45.2</td> <td>7.9</td> <td>81.7</td> <td>89.5</td> <td>78.8</td> <td>93.1</td> <td>66.0</td> </tr> <tr> <td>Multihead Hyena</td> <td>44.8</td> <td>14.4</td> <td>99.0</td> <td>89.4</td> <td>98.6</td> <td>93.0</td> <td>73.2</td> </tr> <tr> <td>Mamba</td> <td>52.7</td> <td>6.7</td> <td>90.4</td> <td>89.5</td> <td>90.1</td> <td>86.3</td> <td>69.3</td> </tr> <tr> <td>GLA</td> <td>38.8</td> <td>6.9</td> <td>80.8</td> <td>63.3</td> <td>81.6</td> <td>88.6</td> <td>60.0</td> </tr> <tr> <td>DeltaNet</td> <td>42.2</td> <td>35.7</td> <td>100</td> <td>52.8</td> <td>100</td> <td>100</td> <td>71.8</td> </tr> </tbody> </table> <p>where DeltaNet demonstrates its strong in-context recall capacities. In the next post, we’ll explore a beautiful algorithm that parallelizes DeltaNet across sequence length. But first, let’s build some intuition about why DeltaNet is particularly well-suited for in-context recall tasks.</p> <h3 id="why-is-deltanet-superior-at-in-context-retrieval-than-linear-attention">Why is DeltaNet Superior at In-context Retrieval than Linear Attention?</h3> <p>To understand DeltaNet’s advantages, let’s first examine how these models handle information storage and retrieval through the lens of fast weight programming. In this framework, the hidden state $\mathbf{S}$ acts as a rapidly changing weight matrix that updates as the model processes new tokens in a sequence. This relationship has gained renewed attention through recent work on Test-Time-Training (TTT <d-cite key="sun-2024-learning"></d-cite>).</p> <p>At the heart of DeltaNet’s effectiveness is its innovative use of the L2 (squared error) loss function<d-footnote>This formulation reveals an interesting connection to Test-Time-Training (TTT): DeltaNet becomes mathematically equivalent to TTT-linear under two specific conditions: first, when architectural elements like layer normalization and residual connections are removed, and second, when TTT is configured to process input sequentially (i.e., with a mini-batch size of 1). This equivalence helps illuminate the theoretical foundations of both approaches.</d-footnote>:</p> \[L(S) = \frac{1}{2}|S \mathbf{k}_t - \mathbf{v}_t|^2_F\] <p>This quadratic loss function provides several crucial advantages in the context of memory and retrieval. By measuring the Euclidean distance between predictions and actual values, it creates a natural way to quantify errors. More importantly, its squared nature means that larger errors result in proportionally larger penalties, creating a built-in prioritization mechanism for correction.</p> <p>When we apply gradient descent to this loss function, we arrive at DeltaNet’s update rule:</p> \[\begin{aligned} \mathbf{S}_t &amp;= \mathbf{S}_{t-1} - \eta_t \nabla L(\mathbf{S}_{t-1}) \\ &amp;= \mathbf{S}_{t-1} - \eta_t (\mathbf{S}_{t-1} \mathbf{k}_t - \mathbf{v}_t) \mathbf{k}_t^\top \end{aligned}\] <p>Setting the learning rate $\eta_t = \beta_t$ gives us the complete DeltaNet update mechanism. This formulation creates an adaptive learning system that responds dynamically to error magnitude. Think of it as an attentive student who adjusts their learning strategy based on how serious their mistakes are. The error term $(\mathbf{S}_{t-1} \mathbf{k}_t - \mathbf{v}_t)$ scales the updates proportionally to the prediction error, allowing for both large corrections when needed and subtle refinements as performance improves. The adaptive learning rate $\beta_t$ adds another layer of flexibility, letting the model adjust its sensitivity to new information based on confidence.</p> <p>In contrast, linear attention takes a simpler approach with a linear loss function:</p> \[L^\prime(\mathbf{S}) = -\langle \mathbf{S} \mathbf{k}_t, \mathbf{v}_t \rangle_F\] <p>This leads to a more basic update rule:</p> \[\begin{aligned} \mathbf{S}_t &amp;= \mathbf{S}_{t-1} - \eta_t \nabla L^\prime(\mathbf{S}_{t-1}) \\ &amp;= \mathbf{S}_{t-1} + \eta_t \mathbf{v}_t \mathbf{k}_t^\top \end{aligned}\] <p>With $\eta_t = 1$, we get the standard linear attention update. While simpler, this approach has significant limitations. The linear loss only considers directional alignment between predictions and targets, missing the nuanced error handling that squared error provides. It’s analogous to a student who makes the same size adjustment regardless of how far off their answer was - an inefficient learning strategy, especially for tasks requiring precise memory retrieval.</p> <p>This difference becomes particularly significant in MQAR tasks, where precise key-value associations are essential. DeltaNet’s L2 loss-driven approach allows it to build and maintain more accurate memory representations by optimizing directly for prediction accuracy. The sophisticated error correction mechanism, stemming from the properties of L2 loss, makes DeltaNet especially effective for applications requiring precise context recall, giving it a clear advantage over linear attention in these scenarios.</p>]]></content><author><name>Songlin Yang</name></author><summary type="html"><![CDATA[A gentle and comprehensive introduction to the DeltaNet]]></summary></entry></feed>